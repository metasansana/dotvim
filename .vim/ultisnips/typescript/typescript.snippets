snippet import* "Declare a qualified import"
import * as ${1:name} from '${2}';
endsnippet

snippet import "Declare an import of one or more members"
import { ${1:imports} } from '${2}';
endsnippet

snippet type "Declare an un-exported type."
/**
 * ${1:name} ${2:comment}
 */
type $1 = ${3};
endsnippet

snippet typex "Declare an exported type."
/**
 * ${1:name} ${2:comment}
 */
export type $1 = ${3};
endsnippet

snippet int "Declare an un-exported interface."
/**
 * ${1:name} ${2:comment}
 */
interface $1 {

  ${3}

}
endsnippet

snippet intx "Declare an exported interface."
/**
 * ${1:name} ${2:comment}
 */
export interface $1 {

  ${3}

}
endsnippet

snippet class "Declare an un-exported local class."
/**
 * ${1:name} ${2}
 */
class $1 ${3:extends} {

  ${4}

}
endsnippet

snippet classx "Declare an exported class."
/**
 * ${1:name} ${2}
 */
export class $1 ${3:extends} {

  ${4}

}
endsnippet

snippet cons "Declare a custom class constructor."
constructor(${1}) {

  ${2}

}
endsnippet

snippet prop "Declare a property on a class."
/**
 * ${1:name} ${2:description}
 */ 
$1:${2:type};
endsnippet

snippet propi "Create an intialized property on a class."
/**
 * ${1:name} ${2:description}
 */ 
$1${2:type} = ${3};
endsnippet

snippet method "Declare a method on a class."
/**
 * ${1:myMethod} ${2:method description}
 */
$1(${3}): ${4} {

   ${5}

}
endsnippet

snippet methodi "Declare a method on a interface"
/**
 * ${1:myMethod} ${2:method description}
 */
$1(${3}): ${4}
endsnippet

snippet func "Declare an const function."
const $1 = ${3}(${4})${5} => ${6}
endsnippet

snippet funcx "Declare an exported const function."
/**
 * ${1:name} ${2:comment}
 */
export const $1 = ${3}(${4}) ${5} => ${6}
endsnippet

snippet funcb "Declare a const function with a body"
const $1 = ${3}(${4})${5} => {

  ${6}

}
endsnippet

snippet funcbx "Declare an exported const function with a body"
/**
 * ${1:name} ${2:comment}
 */
export const $1 = ${3}(${4})${5} => {

  ${6}

}
endsnippet

snippet describe
	describe('${1}', () => {
	  ${2}
	});
endsnippet

snippet it
	it('${1}', () => {
	  ${2}
	});
endsnippet

snippet bef
	before( () => {
	  ${1}
	});
endsnippet

snippet befe
	beforeEach(() => {
	  ${1}
	});
endsnippet

snippet => "Create a single arg arrow function"
${1:x}=>${2}
endsnippet

snippet ()=> "Create an arrow function with parens."
(${1})${2}=>${3}
endsnippet

snippet ()=> "Create an arrow function with parens and a multiline body."
(${1})${2}=> {

  ${3}

}
endsnippet

snippet id "identity function"
x=>x
endsnippet
