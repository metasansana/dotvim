
# es2015
snippet cls
	/**
	 * ${1:name} ${2:comment}
	 */
	class $1 {

	  constructor(${3}) {

	  }

	}

snippet mod
	/**
	 * @module ${1}
	 * 
	 * $1 ${2}
	 */
	 ${3}

snippet clsx
	/**
	 * ${1:name} ${2:comment}
	 */
	export class $1 {

	  constructor(${3}) {

	  }

	}
	${4}

snippet cld
	/**
	 * ${1:name} ${2:comment}
	 */
	export class $1 {

	  constructor(${3}) {

	  }

	}
	export default $1
snippet react
	/**
	 * ${1:name} ${2:comment}
	 */
	class $1 extends react.Component {

	  constructor(${3}) {

	  }

	}
	
	$1.propTypes = {};

	$1.defaultProps = {};

	export default $1
snippet meth
	/**
	 * ${1:myMethod} ${2:will do good things}
	 */
	$1(${3}) {
	  ${4}
	}
snippet ef
	/**
	 * ${1:myMethod} ${2:will do good things}
	 */
	export function $1(${3}) {
	  ${4}
	}

# express method on prototype
snippet prmx
	/**
	 * on${1:myMethod} ${2:will do good things}
	 *
	 * @instance
	 * @param {Request} req 
	 * @param {Response} res 
	 * @param {Function} next
	 *
	 */
	this.on$1 = function (req, res, next) {
	${3}
	};

#property
snippet @prop
	@property {${1}} ${2:name} - ${3:comment}

snippet describe
	describe('${1}', function () {
		${2}
	});

snippet it
	it('${1}', function() {
		${2}
	});

snippet bef
	before( function() {
		${1}
	});

snippet befe
	beforeEach(function(){
		${1}
	});

snippet exp=>
	/**
	 * ${1:func} ${2:will do good things}
	 * ${5}
	 */
	export const $1 = ${3}=> ${4};

snippet exp=>{}
	/**
	 * ${1:func} ${2:will do good things}
	 * ${5}
	 */
	export const $1 = (${3})=> {
	  ${4}
	};

snippet expf
	/**
	 * ${1:myMethod} ${2:will do good things}
	 */
	export function $1(${3}) {
	  ${4}
	}

snippet expdf
	/**
	 * ${1:myMethod} ${2:will do good things}
	 */
	export default function $1(${3}) {
	  ${4}
	}

snippet imp
	import ${1} from '${2}';

snippet @
	// jshint ignore:start
	@${1:name} ${2}
	// jshint ignore:end
snippet @dec
	@${1:name} ${2}

snippet cle
	/**
	 * ${1:CustomError} ${2}
	 */
	export function $1(${3:message}) {

		this.message = ${4:$2};
		this.stack = (new Error(this.message)).stack;
		this.name = this.constructor.name;

		if (Error.hasOwnProperty('captureStackTrace'))
			Error.captureStackTrace(this, this.constructor);

		${5}

	}

	$1.prototype = Object.create(Error.prototype);
	$1.prototype.constructor = $1;

	${6:export default $1}
